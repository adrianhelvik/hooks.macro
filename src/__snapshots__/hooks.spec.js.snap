// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Hooks macro › Does not create a double require() with default React import: Does not create a double require() with default React import 1`] = `
"
import React from 'react';
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ value }) {
  return useAutoMemo(() => value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = _interopRequireWildcard(require(\\"react\\"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function FakeComponent(_ref) {
  var value = _ref.value;
  return (0, _react.useMemo)(function () {
    return value;
  }, [value]);
}
"
`;

exports[`Hooks macro › Does not create a double require() with named hook import: Does not create a double require() with named hook import 1`] = `
"
import { useMemo } from 'react';
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ value }) {
  return useAutoMemo(() => value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var value = _ref.value;
  return (0, _react.useMemo)(function () {
    return value;
  }, [value]);
}
"
`;

exports[`Hooks macro › Is not confused by block scopes: Is not confused by block scopes 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ propValue = 2 }) {
  const outer = useSomething(3);
  {
    const inner = useSomething(7);
    const result = useAutoMemo(outer * inner * propValue);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var _ref$propValue = _ref.propValue,
      propValue = _ref$propValue === void 0 ? 2 : _ref$propValue;
  var outer = useSomething(3);
  {
    var inner = useSomething(7);
    var result = (0, _react.useMemo)(function () {
      return outer * inner * propValue;
    }, [outer, inner, propValue]);
  }
}
"
`;

exports[`Hooks macro › Is not confused by default assignments: Is not confused by default assignments 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ number = 12 }) {
  return useAutoMemo(() => number);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var _ref$number = _ref.number,
      number = _ref$number === void 0 ? 12 : _ref$number;
  return (0, _react.useMemo)(function () {
    return number;
  }, [number]);
}
"
`;

exports[`Hooks macro › Is not confused by omonims in other block scopes: Is not confused by omonims in other block scopes 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  {
    const inner = useSomething(7);
    const result = useAutoMemo(inner * other);
  }
  {
    const other = useSomething(6);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  {
    var inner = useSomething(7);
    var result = (0, _react.useMemo)(function () {
      return inner * other;
    }, [inner]);
  }
  {
    var _other = useSomething(6);
  }
}
"
`;

exports[`Hooks macro › Is not confused by re-assignments over literal: Is not confused by re-assignments over literal 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  let literal = 3.5;
  literal = Math.random();
  const value = useSomething(12);
  return useAutoMemo(() => literal * value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var literal = 3.5;
  literal = Math.random();
  var value = useSomething(12);
  return (0, _react.useMemo)(function () {
    return literal * value;
  }, [literal, value]);
}
"
`;

exports[`Hooks macro › Is not confused by re-assignments: Is not confused by re-assignments 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ value }) {
  let fn = () => value;
  fn = 14;
  return useAutoMemo(() => fn());
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var value = _ref.value;

  var fn = function fn() {
    return value;
  };

  fn = 14;
  return (0, _react.useMemo)(function () {
    return fn();
  }, [fn]);
}
"
`;

exports[`Hooks macro › Skips globals: Skips globals 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const result = useAutoMemo(() => window.innerHeight);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var result = (0, _react.useMemo)(function () {
    return window.innerHeight;
  }, []);
}
"
`;

exports[`Hooks macro › Skips immutable constants: Skips immutable constants 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const number = 3.5;
  const string = 'hallo';
  const nullish = null;
  const value = useSomething(12);
  return useAutoMemo(() => [value, number, string, nullish]);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var number = 3.5;
  var string = 'hallo';
  var nullish = null;
  var value = useSomething(12);
  return (0, _react.useMemo)(function () {
    return [value, number, string, nullish];
  }, [value]);
}
"
`;

exports[`Hooks macro › Skips internal bindings with omonims: Skips internal bindings with omonims 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const v = useSomething(12);
  const value = [1, 2, 3];
  const result = useAutoMemo(() => value.map(v => v * 2));
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var v = useSomething(12);
  var value = [1, 2, 3];
  var result = (0, _react.useMemo)(function () {
    return value.map(function (v) {
      return v * 2;
    });
  }, [value]);
}
"
`;

exports[`Hooks macro › Skips internal bindings: Skips internal bindings 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = [1, 2, 3];
  const result = useAutoMemo(() => value.map(v => v * 2));
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = [1, 2, 3];
  var result = (0, _react.useMemo)(function () {
    return value.map(function (v) {
      return v * 2;
    });
  }, [value]);
}
"
`;

exports[`Hooks macro › Skips internal const bindings with omonims: Skips internal const bindings with omonims 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const v = useSomething(12);
  const result = useAutoMemo(() => {
    const v = 42;
    return v;
  });
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var v = useSomething(12);
  var result = (0, _react.useMemo)(function () {
    var v = 42;
    return v;
  }, []);
}
"
`;

exports[`Hooks macro › Skips internal destructuring bindings with omonims: Skips internal destructuring bindings with omonims 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const v = useSomething(12);
  const value = [1, 2, 3];
  const result = useAutoMemo(() => {
    const [v] = value;
    return v;
  });
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var v = useSomething(12);
  var value = [1, 2, 3];
  var result = (0, _react.useMemo)(function () {
    var v = value[0];
    return v;
  }, [value]);
}
"
`;

exports[`Hooks macro › Skips numeric constants: Skips numeric constants 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const literal = 3.5;
  const value = useSomething(12);
  return useAutoMemo(() => literal * value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var literal = 3.5;
  var value = useSomething(12);
  return (0, _react.useMemo)(function () {
    return literal * value;
  }, [value]);
}
"
`;

exports[`Hooks macro › Skips out of component bindings: Skips out of component bindings 1`] = `
"
import { useAutoMemo } from './hooks.macro'

const value = { a: { b: { c: 12 }} };

function FakeComponent() {
  const result = useAutoMemo(() => value.a['b'].c);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

var value = {
  a: {
    b: {
      c: 12
    }
  }
};

function FakeComponent() {
  var result = (0, _react.useMemo)(function () {
    return value.a['b'].c;
  }, []);
}
"
`;

exports[`Hooks macro › Works with doubly indirect dependencies on props: Works with doubly indirect dependencies on props 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ getValue }) {
  function getDoubleValue() {
    return getValue() * 2;
  }
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var getValue = _ref.getValue;

  function getDoubleValue() {
    return getValue() * 2;
  }

  var result = (0, _react.useMemo)(function () {
    return getDoubleValue();
  }, [getValue]);
}
"
`;

exports[`Hooks macro › Works with doubly indirect dependencies: Works with doubly indirect dependencies 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  function getValue() {
    return value;
  }
  function getDoubleValue() {
    return getValue() * 2;
  }
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);

  function getValue() {
    return value;
  }

  function getDoubleValue() {
    return getValue() * 2;
  }

  var result = (0, _react.useMemo)(function () {
    return getDoubleValue();
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with external obj and conflicting bindings: Works with external obj and conflicting bindings 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const a = useSomething(12);
  const value = { a: { b: { c: 12 }} };
  const result = useAutoMemo(value.a['b'].c);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var a = useSomething(12);
  var value = {
    a: {
      b: {
        c: 12
      }
    }
  };
  var result = (0, _react.useMemo)(function () {
    return value.a['b'].c;
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with external obj returning arrow: Works with external obj returning arrow 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = { a: { b: { c: 12 }} };
  const result = useAutoMemo(() => value.a['b'].c);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = {
    a: {
      b: {
        c: 12
      }
    }
  };
  var result = (0, _react.useMemo)(function () {
    return value.a['b'].c;
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with external obj: Works with external obj 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = { a: { b: { c: 12 }} };
  const result = useAutoMemo(value.a['b'].c);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = {
    a: {
      b: {
        c: 12
      }
    }
  };
  var result = (0, _react.useMemo)(function () {
    return value.a['b'].c;
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with external value returning arrow: Works with external value returning arrow 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const result = useAutoMemo(() => value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);
  var result = (0, _react.useMemo)(function () {
    return value;
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with external value: Works with external value 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const result = useAutoMemo(value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);
  var result = (0, _react.useMemo)(function () {
    return value;
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with funcs from props, again: Works with funcs from props, again 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ onSomething }) {
  const value = useSomething(12);
  const result = useAutoMemo(() => { onSomething(value) });
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var onSomething = _ref.onSomething;
  var value = useSomething(12);
  var result = (0, _react.useMemo)(function () {
    onSomething(value);
  }, [onSomething, value]);
}
"
`;

exports[`Hooks macro › Works with funcs from props: Works with funcs from props 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ onSomething }) {
  const value = useSomething(12);
  const result = useAutoMemo(() => onSomething(value));
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var onSomething = _ref.onSomething;
  var value = useSomething(12);
  var result = (0, _react.useMemo)(function () {
    return onSomething(value);
  }, [onSomething, value]);
}
"
`;

exports[`Hooks macro › Works with function calls: Works with function calls 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  function callback() {}
  const result = useAutoMemo(() => callback());
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  function callback() {}

  var result = (0, _react.useMemo)(function () {
    return callback();
  }, []);
}
"
`;

exports[`Hooks macro › Works with function expressions: Works with function expressions 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const result = useAutoMemo(function hallo() {
    return value * 2;
  });
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);
  var result = (0, _react.useMemo)(function hallo() {
    return value * 2;
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with indirect \`let\` dependencies (arrow with body): Works with indirect \`let\` dependencies (arrow with body) 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  let getDoubleValue = () => {
    return value * 2;
  }
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);

  var getDoubleValue = function getDoubleValue() {
    return value * 2;
  };

  var result = (0, _react.useMemo)(function () {
    return getDoubleValue();
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with indirect \`let\` dependencies (arrow with expr): Works with indirect \`let\` dependencies (arrow with expr) 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  let getDoubleValue = () => value * 2;
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);

  var getDoubleValue = function getDoubleValue() {
    return value * 2;
  };

  var result = (0, _react.useMemo)(function () {
    return getDoubleValue();
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with indirect dependencies (arrow with body): Works with indirect dependencies (arrow with body) 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const getDoubleValue = () => {
    return value * 2;
  }
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);

  var getDoubleValue = function getDoubleValue() {
    return value * 2;
  };

  var result = (0, _react.useMemo)(function () {
    return getDoubleValue();
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with indirect dependencies (arrow with expr): Works with indirect dependencies (arrow with expr) 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const getDoubleValue = () => value * 2;
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);

  var getDoubleValue = function getDoubleValue() {
    return value * 2;
  };

  var result = (0, _react.useMemo)(function () {
    return getDoubleValue();
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with indirect dependencies (arrow, without call expression): Works with indirect dependencies (arrow, without call expression) 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ values, whitelist }) {
  const valid = value => whitelist.includes(value);
  const goodValues = useAutoMemo(values.filter(valid));
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var values = _ref.values,
      whitelist = _ref.whitelist;

  var valid = function valid(value) {
    return whitelist.includes(value);
  };

  var goodValues = (0, _react.useMemo)(function () {
    return values.filter(valid);
  }, [values, whitelist]);
}
"
`;

exports[`Hooks macro › Works with indirect dependencies (function declaration): Works with indirect dependencies (function declaration) 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const result = useAutoMemo(() => getDoubleValue());

  function getDoubleValue() {
    return value * 2;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);
  var result = (0, _react.useMemo)(function () {
    return getDoubleValue();
  }, [value]);

  function getDoubleValue() {
    return value * 2;
  }
}
"
`;

exports[`Hooks macro › Works with indirect dependencies (function declaration, without call expression): Works with indirect dependencies (function declaration, without call expression) 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ values, whitelist }) {
  const goodValues = useAutoMemo(values.filter(valid));
  function valid(value) {
    return whitelist.includes(value);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var values = _ref.values,
      whitelist = _ref.whitelist;
  var goodValues = (0, _react.useMemo)(function () {
    return values.filter(valid);
  }, [values, whitelist]);

  function valid(value) {
    return whitelist.includes(value);
  }
}
"
`;

exports[`Hooks macro › Works with indirect dependencies (function expression): Works with indirect dependencies (function expression) 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const getDoubleValue = function() {
    return value * 2;
  }

  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);

  var getDoubleValue = function getDoubleValue() {
    return value * 2;
  };

  var result = (0, _react.useMemo)(function () {
    return getDoubleValue();
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with indirect dependencies (function expression, without call expression): Works with indirect dependencies (function expression, without call expression) 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ values, whitelist }) {
  const valid = function valid(value) {
    return whitelist.includes(value);
  };
  const goodValues = useAutoMemo(values.filter(valid));
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var values = _ref.values,
      whitelist = _ref.whitelist;

  var valid = function valid(value) {
    return whitelist.includes(value);
  };

  var goodValues = (0, _react.useMemo)(function () {
    return values.filter(valid);
  }, [values, whitelist]);
}
"
`;

exports[`Hooks macro › Works with multiple identical expressions: Works with multiple identical expressions 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const result = useAutoMemo(value * value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var value = useSomething(12);
  var result = (0, _react.useMemo)(function () {
    return value * value;
  }, [value]);
}
"
`;

exports[`Hooks macro › Works with null returning arrow: Works with null returning arrow 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const result = useAutoMemo(() => null);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var result = (0, _react.useMemo)(function () {
    return null;
  }, []);
}
"
`;

exports[`Hooks macro › Works with null: Works with null 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const result = useAutoMemo(null);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent() {
  var result = (0, _react.useMemo)(function () {
    return null;
  }, []);
}
"
`;

exports[`Hooks macro › Works with values from props: Works with values from props 1`] = `
"
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ propValue }) {
  const result = useAutoMemo(() => propValue);
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _react = require(\\"react\\");

function FakeComponent(_ref) {
  var propValue = _ref.propValue;
  var result = (0, _react.useMemo)(function () {
    return propValue;
  }, [propValue]);
}
"
`;
