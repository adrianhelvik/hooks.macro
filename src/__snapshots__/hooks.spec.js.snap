// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Hooks macro › Does not create a double require() with default React import: Does not create a double require() with default React import 1`] = `

import React from 'react';
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ value }) {
  return useAutoMemo(() => value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';
import React from 'react';

function FakeComponent({ value }) {
  return _useMemo(() => value, [value]);
}


`;

exports[`Hooks macro › Does not create a double require() with named hook import: Does not create a double require() with named hook import 1`] = `

import { useMemo } from 'react';
import { useAutoMemo } from './hooks.macro'

function FakeComponent({ value }) {
  return useAutoMemo(() => value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';
import { useMemo } from 'react';

function FakeComponent({ value }) {
  return _useMemo(() => value, [value]);
}


`;

exports[`Hooks macro › Is not confused by block scopes: Is not confused by block scopes 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ propValue = 2 }) {
  const outer = useSomething(3);
  {
    const inner = useSomething(7);
    const result = useAutoMemo(outer * inner * propValue);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ propValue = 2 }) {
  const outer = useSomething(3);
  {
    const inner = useSomething(7);

    const result = _useMemo(() => outer * inner * propValue, [
      outer,
      inner,
      propValue,
    ]);
  }
}


`;

exports[`Hooks macro › Is not confused by default assignments: Is not confused by default assignments 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ number = 12 }) {
  return useAutoMemo(() => number);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ number = 12 }) {
  return _useMemo(() => number, [number]);
}


`;

exports[`Hooks macro › Is not confused by indirect recursive functions: Is not confused by indirect recursive functions 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ propValue }) {
  return useAutoMemo(first());
  function first() {
    return propValue > 0 ? second() : propValue + 1;
  }
  function second() {
    return propValue < 0 ? first() : propValue + 2;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ propValue }) {
  return _useMemo(() => first(), [propValue]);

  function first() {
    return propValue > 0 ? second() : propValue + 1;
  }

  function second() {
    return propValue < 0 ? first() : propValue + 2;
  }
}


`;

exports[`Hooks macro › Is not confused by omonims in other block scopes: Is not confused by omonims in other block scopes 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  {
    const inner = useSomething(7);
    const result = useAutoMemo(inner * other);
  }
  {
    const other = useSomething(6);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  {
    const inner = useSomething(7);

    const result = _useMemo(() => inner * other, [inner]);
  }
  {
    const other = useSomething(6);
  }
}


`;

exports[`Hooks macro › Is not confused by re-assignments over literal: Is not confused by re-assignments over literal 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  let literal = 3.5;
  literal = Math.random();
  const value = useSomething(12);
  return useAutoMemo(() => literal * value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  let literal = 3.5;
  literal = Math.random();
  const value = useSomething(12);
  return _useMemo(() => literal * value, [literal, value]);
}


`;

exports[`Hooks macro › Is not confused by re-assignments: Is not confused by re-assignments 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ value }) {
  let fn = () => value;
  fn = 14;
  return useAutoMemo(() => fn());
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ value }) {
  let fn = () => value;

  fn = 14;
  return _useMemo(() => fn(), [fn]);
}


`;

exports[`Hooks macro › Is not confused by self-recursive function (directly called): Is not confused by self-recursive function (directly called) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ propValue }) {
  return useAutoMemo(fibonacci(propValue));
  function fibonacci(n) {
    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ propValue }) {
  return _useMemo(() => fibonacci(propValue), [propValue]);

  function fibonacci(n) {
    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
  }
}


`;

exports[`Hooks macro › Is not confused by self-recursive function (indirectly called): Is not confused by self-recursive function (indirectly called) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ propValue }) {
  return useAutoMemo(calculate());
  function calculate() {
    return fibonacci(propValue);
  }
  function fibonacci(n) {
    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ propValue }) {
  return _useMemo(() => calculate(), [propValue]);

  function calculate() {
    return fibonacci(propValue);
  }

  function fibonacci(n) {
    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
  }
}


`;

exports[`Hooks macro › Skips globals: Skips globals 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const result = useAutoMemo(() => window.innerHeight);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const result = _useMemo(() => window.innerHeight, []);
}


`;

exports[`Hooks macro › Skips immutable constants: Skips immutable constants 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const number = 3.5;
  const string = 'hallo';
  const nullish = null;
  const value = useSomething(12);
  return useAutoMemo(() => [value, number, string, nullish]);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const number = 3.5;
  const string = 'hallo';
  const nullish = null;
  const value = useSomething(12);
  return _useMemo(() => [value, number, string, nullish], [value]);
}


`;

exports[`Hooks macro › Skips internal bindings with omonims: Skips internal bindings with omonims 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const v = useSomething(12);
  const value = [1, 2, 3];
  const result = useAutoMemo(() => value.map(v => v * 2));
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const v = useSomething(12);
  const value = [1, 2, 3];

  const result = _useMemo(() => value.map(v => v * 2), [value]);
}


`;

exports[`Hooks macro › Skips internal bindings: Skips internal bindings 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = [1, 2, 3];
  const result = useAutoMemo(() => value.map(v => v * 2));
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = [1, 2, 3];

  const result = _useMemo(() => value.map(v => v * 2), [value]);
}


`;

exports[`Hooks macro › Skips internal const bindings with omonims: Skips internal const bindings with omonims 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const v = useSomething(12);
  const result = useAutoMemo(() => {
    const v = 42;
    return v;
  });
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const v = useSomething(12);

  const result = _useMemo(() => {
    const v = 42;
    return v;
  }, []);
}


`;

exports[`Hooks macro › Skips internal destructuring bindings with omonims: Skips internal destructuring bindings with omonims 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const v = useSomething(12);
  const value = [1, 2, 3];
  const result = useAutoMemo(() => {
    const [v] = value;
    return v;
  });
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const v = useSomething(12);
  const value = [1, 2, 3];

  const result = _useMemo(() => {
    const [v] = value;
    return v;
  }, [value]);
}


`;

exports[`Hooks macro › Skips numeric constants: Skips numeric constants 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const literal = 3.5;
  const value = useSomething(12);
  return useAutoMemo(() => literal * value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const literal = 3.5;
  const value = useSomething(12);
  return _useMemo(() => literal * value, [value]);
}


`;

exports[`Hooks macro › Skips out of component bindings: Skips out of component bindings 1`] = `

import { useAutoMemo } from './hooks.macro'

const value = { a: { b: { c: 12 }} };

function FakeComponent() {
  const result = useAutoMemo(() => value.a['b'].c);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';
const value = {
  a: {
    b: {
      c: 12,
    },
  },
};

function FakeComponent() {
  const result = _useMemo(() => value.a['b'].c, []);
}


`;

exports[`Hooks macro › Works with doubly indirect dependencies on props: Works with doubly indirect dependencies on props 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ getValue }) {
  function getDoubleValue() {
    return getValue() * 2;
  }
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ getValue }) {
  function getDoubleValue() {
    return getValue() * 2;
  }

  const result = _useMemo(() => getDoubleValue(), [getValue]);
}


`;

exports[`Hooks macro › Works with doubly indirect dependencies: Works with doubly indirect dependencies 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  function getValue() {
    return value;
  }
  function getDoubleValue() {
    return getValue() * 2;
  }
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  function getValue() {
    return value;
  }

  function getDoubleValue() {
    return getValue() * 2;
  }

  const result = _useMemo(() => getDoubleValue(), [value]);
}


`;

exports[`Hooks macro › Works with external obj and conflicting bindings: Works with external obj and conflicting bindings 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const a = useSomething(12);
  const value = { a: { b: { c: 12 }} };
  const result = useAutoMemo(value.a['b'].c);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const a = useSomething(12);
  const value = {
    a: {
      b: {
        c: 12,
      },
    },
  };

  const result = _useMemo(() => value.a['b'].c, [value]);
}


`;

exports[`Hooks macro › Works with external obj returning arrow: Works with external obj returning arrow 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = { a: { b: { c: 12 }} };
  const result = useAutoMemo(() => value.a['b'].c);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = {
    a: {
      b: {
        c: 12,
      },
    },
  };

  const result = _useMemo(() => value.a['b'].c, [value]);
}


`;

exports[`Hooks macro › Works with external obj: Works with external obj 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = { a: { b: { c: 12 }} };
  const result = useAutoMemo(value.a['b'].c);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = {
    a: {
      b: {
        c: 12,
      },
    },
  };

  const result = _useMemo(() => value.a['b'].c, [value]);
}


`;

exports[`Hooks macro › Works with external value returning arrow: Works with external value returning arrow 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const result = useAutoMemo(() => value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  const result = _useMemo(() => value, [value]);
}


`;

exports[`Hooks macro › Works with external value: Works with external value 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const result = useAutoMemo(value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  const result = _useMemo(() => value, [value]);
}


`;

exports[`Hooks macro › Works with funcs from props, again: Works with funcs from props, again 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ onSomething }) {
  const value = useSomething(12);
  const result = useAutoMemo(() => { onSomething(value) });
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ onSomething }) {
  const value = useSomething(12);

  const result = _useMemo(() => {
    onSomething(value);
  }, [onSomething, value]);
}


`;

exports[`Hooks macro › Works with funcs from props: Works with funcs from props 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ onSomething }) {
  const value = useSomething(12);
  const result = useAutoMemo(() => onSomething(value));
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ onSomething }) {
  const value = useSomething(12);

  const result = _useMemo(() => onSomething(value), [onSomething, value]);
}


`;

exports[`Hooks macro › Works with function calls: Works with function calls 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  function callback() {}
  const result = useAutoMemo(() => callback());
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  function callback() {}

  const result = _useMemo(() => callback(), []);
}


`;

exports[`Hooks macro › Works with function expressions: Works with function expressions 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const result = useAutoMemo(function hallo() {
    return value * 2;
  });
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  const result = _useMemo(
    function hallo() {
      return value * 2;
    },
    [value],
  );
}


`;

exports[`Hooks macro › Works with indirect \`let\` dependencies (arrow with body): Works with indirect \`let\` dependencies (arrow with body) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  let getDoubleValue = () => {
    return value * 2;
  }
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  let getDoubleValue = () => {
    return value * 2;
  };

  const result = _useMemo(() => getDoubleValue(), [value]);
}


`;

exports[`Hooks macro › Works with indirect \`let\` dependencies (arrow with expr): Works with indirect \`let\` dependencies (arrow with expr) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  let getDoubleValue = () => value * 2;
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  let getDoubleValue = () => value * 2;

  const result = _useMemo(() => getDoubleValue(), [value]);
}


`;

exports[`Hooks macro › Works with indirect dependencies (arrow with body): Works with indirect dependencies (arrow with body) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const getDoubleValue = () => {
    return value * 2;
  }
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  const getDoubleValue = () => {
    return value * 2;
  };

  const result = _useMemo(() => getDoubleValue(), [value]);
}


`;

exports[`Hooks macro › Works with indirect dependencies (arrow with expr): Works with indirect dependencies (arrow with expr) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const getDoubleValue = () => value * 2;
  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  const getDoubleValue = () => value * 2;

  const result = _useMemo(() => getDoubleValue(), [value]);
}


`;

exports[`Hooks macro › Works with indirect dependencies (arrow, without call expression): Works with indirect dependencies (arrow, without call expression) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ values, whitelist }) {
  const valid = value => whitelist.includes(value);
  const goodValues = useAutoMemo(values.filter(valid));
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ values, whitelist }) {
  const valid = value => whitelist.includes(value);

  const goodValues = _useMemo(() => values.filter(valid), [values, whitelist]);
}


`;

exports[`Hooks macro › Works with indirect dependencies (function declaration): Works with indirect dependencies (function declaration) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const result = useAutoMemo(() => getDoubleValue());

  function getDoubleValue() {
    return value * 2;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  const result = _useMemo(() => getDoubleValue(), [value]);

  function getDoubleValue() {
    return value * 2;
  }
}


`;

exports[`Hooks macro › Works with indirect dependencies (function declaration, without call expression): Works with indirect dependencies (function declaration, without call expression) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ values, whitelist }) {
  const goodValues = useAutoMemo(values.filter(valid));
  function valid(value) {
    return whitelist.includes(value);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ values, whitelist }) {
  const goodValues = _useMemo(() => values.filter(valid), [values, whitelist]);

  function valid(value) {
    return whitelist.includes(value);
  }
}


`;

exports[`Hooks macro › Works with indirect dependencies (function expression): Works with indirect dependencies (function expression) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const getDoubleValue = function() {
    return value * 2;
  }

  const result = useAutoMemo(() => getDoubleValue());
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  const getDoubleValue = function () {
    return value * 2;
  };

  const result = _useMemo(() => getDoubleValue(), [value]);
}


`;

exports[`Hooks macro › Works with indirect dependencies (function expression, without call expression): Works with indirect dependencies (function expression, without call expression) 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ values, whitelist }) {
  const valid = function valid(value) {
    return whitelist.includes(value);
  };
  const goodValues = useAutoMemo(values.filter(valid));
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ values, whitelist }) {
  const valid = function valid(value) {
    return whitelist.includes(value);
  };

  const goodValues = _useMemo(() => values.filter(valid), [values, whitelist]);
}


`;

exports[`Hooks macro › Works with multiple identical expressions: Works with multiple identical expressions 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const value = useSomething(12);
  const result = useAutoMemo(value * value);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const value = useSomething(12);

  const result = _useMemo(() => value * value, [value]);
}


`;

exports[`Hooks macro › Works with null returning arrow: Works with null returning arrow 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const result = useAutoMemo(() => null);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const result = _useMemo(() => null, []);
}


`;

exports[`Hooks macro › Works with null: Works with null 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent() {
  const result = useAutoMemo(null);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent() {
  const result = _useMemo(() => null, []);
}


`;

exports[`Hooks macro › Works with values from props: Works with values from props 1`] = `

import { useAutoMemo } from './hooks.macro'

function FakeComponent({ propValue }) {
  const result = useAutoMemo(() => propValue);
}

      ↓ ↓ ↓ ↓ ↓ ↓

import { useMemo as _useMemo } from 'react';

function FakeComponent({ propValue }) {
  const result = _useMemo(() => propValue, [propValue]);
}


`;
